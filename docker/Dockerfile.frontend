# Multi-stage Dockerfile for T-Bot Frontend
# Optimized React/TypeScript application with Nginx

# ==============================================================================
# Node.js Builder Stage - Build React application
# ==============================================================================
FROM node:18.19.0-alpine as builder

LABEL maintainer="T-Bot Trading Team" \
      version="1.0" \
      description="T-Bot Frontend Builder" \
      security.scan="enabled"

# Set working directory
WORKDIR /app

# Install dependencies for node-gyp and native modules
RUN apk add --no-cache \
        python3 \
        make \
        g++ \
        git

# Set Node.js environment for production build
ENV NODE_ENV=production \
    GENERATE_SOURCEMAP=false \
    INLINE_RUNTIME_CHUNK=false

# Copy package files first for better layer caching
COPY frontend/package*.json ./

# Install dependencies with security audit
RUN npm ci --only=production --no-audit --prefer-offline && \
    npm audit --audit-level=high && \
    npm cache clean --force

# Copy source code
COPY frontend/src ./src
COPY frontend/public ./public
COPY frontend/tsconfig.json ./
COPY frontend/webpack.config.js ./

# Build the application with optimizations
RUN npm run build && \
    # Verify build output
    ls -la dist/ && \
    # Remove source maps and unnecessary files for production
    find dist/ -name "*.map" -delete && \
    # Compress build artifacts
    find dist/ -type f \( -name "*.js" -o -name "*.css" \) -exec gzip -9 -k {} \;

# Security scan of built artifacts
RUN npm audit --audit-level=moderate

# ==============================================================================
# Nginx Production Stage - Serve optimized frontend
# ==============================================================================
FROM nginx:1.25-alpine as production

LABEL maintainer="T-Bot Trading Team" \
      version="1.0" \
      description="T-Bot Frontend - Production Web Server" \
      security.scan="enabled"

# Install security updates
RUN apk upgrade --no-cache && \
    apk add --no-cache \
        curl \
        tzdata \
        dumb-init

# Create non-root user for Nginx
RUN addgroup -g 1004 -S frontend && \
    adduser -u 1004 -S frontend -G frontend -h /home/frontend -s /bin/sh

# Remove default Nginx configuration
RUN rm -rf /etc/nginx/nginx.conf \
           /etc/nginx/conf.d/default.conf \
           /var/www/html/*

# Copy optimized Nginx configuration
COPY docker/configs/nginx/nginx.conf /etc/nginx/nginx.conf
COPY docker/configs/nginx/security-headers.conf /etc/nginx/conf.d/security-headers.conf
COPY docker/configs/nginx/gzip.conf /etc/nginx/conf.d/gzip.conf

# Copy built application from builder stage
COPY --from=builder --chown=nginx:nginx /app/dist /var/www/html

# Create necessary directories with proper permissions
RUN mkdir -p \
        /var/cache/nginx/client_temp \
        /var/cache/nginx/proxy_temp \
        /var/cache/nginx/fastcgi_temp \
        /var/cache/nginx/uwsgi_temp \
        /var/cache/nginx/scgi_temp \
        /var/log/nginx \
        /run/nginx \
    && chown -R nginx:nginx \
        /var/cache/nginx \
        /var/log/nginx \
        /run/nginx \
        /var/www/html \
    && chmod -R 755 /var/www/html

# Security hardening - remove unnecessary packages and files
RUN apk del --purge \
    && rm -rf /var/cache/apk/* /tmp/* /var/tmp/* \
    && find /var/www/html -type f -name "*.md" -delete \
    && find /var/www/html -type f -name "*.txt" -delete

# Set security labels
LABEL security.non-root="true" \
      security.minimal="true" \
      operational.service="frontend" \
      operational.tier="presentation"

# Expose HTTP and HTTPS ports
EXPOSE 80 443

# Health check for Nginx
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:80/health || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Start Nginx with proper signal handling
CMD ["nginx", "-g", "daemon off;"]

# ==============================================================================
# Development Stage - Hot reload and debugging
# ==============================================================================
FROM node:18.19.0-alpine as development

RUN addgroup -g 1004 -S frontend && \
    adduser -u 1004 -S frontend -G frontend -h /home/frontend -s /bin/sh

# Install development tools
RUN apk add --no-cache \
        git \
        curl \
        vim

WORKDIR /app

# Copy package files
COPY --chown=frontend:frontend frontend/package*.json ./

# Install all dependencies including dev dependencies
RUN npm install && \
    npm cache clean --force

# Copy source code with proper ownership
COPY --chown=frontend:frontend frontend/ .

# Switch to non-root user
USER frontend

# Expose development server port
EXPOSE 3000

# Set development environment
ENV NODE_ENV=development \
    CHOKIDAR_USEPOLLING=true \
    WATCHPACK_POLLING=true

# Health check for development server
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000 || exit 1

# Development server with hot reload
CMD ["npm", "start"]

# ==============================================================================
# Testing Stage - For CI/CD pipeline
# ==============================================================================
FROM development as testing

# Switch back to root for package installation
USER root

# Install testing tools
RUN apk add --no-cache \
        chromium \
        chromium-chromedriver \
        xvfb \
        dbus

# Install additional testing dependencies
RUN npm install --save-dev \
        @testing-library/jest-dom \
        @testing-library/react \
        @testing-library/user-event \
        jest-environment-jsdom \
        puppeteer

# Set up Chrome for testing
ENV CHROME_BIN=/usr/bin/chromium-browser \
    CHROME_PATH=/usr/bin/chromium-browser \
    PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser

USER frontend

# Set testing environment
ENV NODE_ENV=test \
    CI=true

# Testing command
CMD ["npm", "test", "--", "--coverage", "--watchAll=false"]