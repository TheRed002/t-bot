services:
  # Backend FastAPI service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: tbot-backend-dev
    ports:
      - "8000:8000"
    environment:
      - DEBUG=true
      - DATABASE_URL=postgresql://tbot:tbot_password@postgresql:5432/tbot_dev
      - REDIS_URL=redis://redis:6379/0
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN:-tbot_dev_token}
      - INFLUXDB_ORG=tbot_dev
      - INFLUXDB_BUCKET=trading_data_dev
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev_secret_key_change_in_production}
      - CORS_ORIGINS=http://localhost:3000,http://frontend:3000
    volumes:
      - ./src:/app/src
      - ./config:/app/config
      - ./logs:/app/logs
      - ./data:/app/data
      - ./models:/app/models
      - ./state:/app/state
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    networks:
      - tbot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tbot-frontend-dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    depends_on:
      - backend
    networks:
      - tbot-network
    restart: unless-stopped

  # PostgreSQL Database
  postgresql:
    image: postgres:15-alpine
    container_name: tbot-postgresql-dev
    environment:
      POSTGRES_DB: tbot_dev
      POSTGRES_USER: tbot
      POSTGRES_PASSWORD: tbot_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgresql_data_dev:/var/lib/postgresql/data
      - ./docker/services/postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./docker/configs/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./docker/configs/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf -c hba_file=/etc/postgresql/pg_hba.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tbot -d tbot_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - tbot-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tbot-redis-dev
    command: redis-server --requirepass redis_dev_password --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - tbot-network
    restart: unless-stopped

  # InfluxDB Time Series Database
  influxdb:
    image: influxdb:2.7-alpine
    container_name: tbot-influxdb-dev
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: influxdb_dev_password
      DOCKER_INFLUXDB_INIT_ORG: tbot_dev
      DOCKER_INFLUXDB_INIT_BUCKET: trading_data_dev
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: tbot_dev_token
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data_dev:/var/lib/influxdb2
      - influxdb_config_dev:/etc/influxdb2
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - tbot-network
    restart: unless-stopped

  # Optional: PgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: tbot-pgadmin-dev
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@tbot.local
      PGADMIN_DEFAULT_PASSWORD: pgadmin_dev_password
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data_dev:/var/lib/pgadmin
    depends_on:
      - postgresql
    networks:
      - tbot-network
    restart: unless-stopped
    profiles:
      - tools

  # Optional: Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: tbot-redis-commander-dev
    environment:
      REDIS_HOSTS: local:redis:6379:0:redis_dev_password
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - tbot-network
    restart: unless-stopped
    profiles:
      - tools

volumes:
  postgresql_data_dev:
    driver: local
  redis_data_dev:
    driver: local
  influxdb_data_dev:
    driver: local
  influxdb_config_dev:
    driver: local
  pgadmin_data_dev:
    driver: local

networks:
  tbot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16