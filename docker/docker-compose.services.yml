services:
  # PostgreSQL Database
  postgresql:
    image: postgres:15-alpine
    container_name: tbot-postgresql-${NODE_ENV:-dev}
    environment:
      POSTGRES_DB: ${DB_NAME:-tbot_dev}
      POSTGRES_USER: ${DB_USER:-tbot}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-tbot_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./services/postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-tbot} -d ${DB_NAME:-tbot_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - tbot-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tbot-redis-${NODE_ENV:-dev}
    command: redis-server ${REDIS_PASSWORD:+--requirepass ${REDIS_PASSWORD}} --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - tbot-network
    restart: unless-stopped

  # InfluxDB Time Series Database
  influxdb:
    image: influxdb:2.7-alpine
    container_name: tbot-influxdb-${NODE_ENV:-dev}
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_ADMIN_USER:-admin}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_ADMIN_PASSWORD:-influxdb_dev_password}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG:-tbot_dev}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET:-trading_data_dev}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN:-tbot_dev_token}
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - tbot-network
    restart: unless-stopped

  # Optional: PgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: tbot-pgadmin-dev
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@tbot.local
      PGADMIN_DEFAULT_PASSWORD: pgadmin_dev_password
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data_dev:/var/lib/pgadmin
    depends_on:
      - postgresql
    networks:
      - tbot-network
    restart: unless-stopped
    profiles:
      - tools

  # Optional: Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: tbot-redis-commander-dev
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - tbot-network
    restart: unless-stopped
    profiles:
      - tools

volumes:
  postgresql_data:
    driver: local
  redis_data:
    driver: local
  influxdb_data:
    driver: local
  influxdb_config:
    driver: local
  pgadmin_data:
    driver: local

networks:
  tbot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16