# Secrets Management Configuration - T-Bot Trading System
# Comprehensive secrets management with rotation, encryption, and audit trails

# Global Secrets Management Settings
secrets_management:
  enabled: true
  provider: "vault"  # vault, aws_secrets_manager, azure_key_vault, kubernetes_secrets
  
  # Primary secrets backend
  primary_backend:
    type: "vault"
    config:
      url: "${VAULT_URL:-https://vault.company.internal:8200}"
      auth_method: "kubernetes"  # kubernetes, token, ldap, userpass, aws
      namespace: "tbot"
      
      # Vault authentication
      auth:
        kubernetes:
          role: "tbot-production"
          token_path: "/var/run/secrets/kubernetes.io/serviceaccount/token"
        token:
          token: "${VAULT_TOKEN}"
        ldap:
          username: "${VAULT_LDAP_USER}"
          password: "${VAULT_LDAP_PASSWORD}"
        aws:
          role: "tbot-vault-role"
          region: "${AWS_REGION}"
      
      # TLS configuration for Vault
      tls:
        enabled: true
        ca_cert: "/etc/ssl/certs/vault-ca.crt"
        client_cert: "/etc/ssl/certs/vault-client.crt"
        client_key: "/etc/ssl/private/vault-client.key"
        verify: true
      
      # Connection settings
      timeout: 30
      max_retries: 3
      retry_backoff: 1000
  
  # Backup secrets backend
  backup_backend:
    type: "aws_secrets_manager"
    config:
      region: "${AWS_REGION:-us-east-1}"
      access_key_id: "${AWS_ACCESS_KEY_ID}"
      secret_access_key: "${AWS_SECRET_ACCESS_KEY}"
      
      # KMS encryption
      kms_key_id: "${AWS_KMS_KEY_ID}"
      encryption: true

# Secret Categories and Policies
secret_categories:
  # Database credentials
  database_secrets:
    path_prefix: "database/"
    ttl: 2592000  # 30 days
    max_ttl: 7776000  # 90 days
    
    secrets:
      postgresql:
        path: "database/postgresql"
        type: "dynamic"  # dynamic, static
        fields:
          - name: "username"
            type: "string"
            required: true
          - name: "password"
            type: "string"
            required: true
            min_length: 16
            complexity: "high"
        
        # Dynamic secret configuration
        dynamic_config:
          backend: "postgresql"
          connection_url: "postgresql://{{username}}:{{password}}@${DB_HOST}:${DB_PORT}/postgres"
          allowed_roles: ["tbot-readonly", "tbot-readwrite", "tbot-admin"]
          default_role: "tbot-readwrite"
          credential_type: "password"
          revocation_sql: "REVOKE ALL PRIVILEGES ON ALL TABLES IN SCHEMA public FROM \"{{name}}\";"
      
      redis:
        path: "database/redis"
        type: "static"
        fields:
          - name: "password"
            type: "string"
            required: true
            min_length: 32
        
        rotation_policy:
          enabled: true
          interval: 2592000  # 30 days
          advance_notice: 604800  # 7 days
      
      influxdb:
        path: "database/influxdb"
        type: "static"
        fields:
          - name: "token"
            type: "string"
            required: true
          - name: "org"
            type: "string"
            required: true
          - name: "bucket"
            type: "string"
            required: true
  
  # Exchange API credentials
  exchange_secrets:
    path_prefix: "exchanges/"
    ttl: 86400  # 1 day
    max_ttl: 604800  # 7 days
    
    secrets:
      binance:
        path: "exchanges/binance"
        type: "static"
        fields:
          - name: "api_key"
            type: "string"
            required: true
          - name: "api_secret"
            type: "string"
            required: true
            sensitive: true
        
        validation:
          test_endpoint: "https://api.binance.com/api/v3/account"
          test_method: "GET"
          test_headers:
            "X-MBX-APIKEY": "{{api_key}}"
        
        rotation_policy:
          enabled: true
          interval: 604800  # 7 days
          advance_notice: 86400  # 1 day
          automatic: false  # Manual rotation for exchange APIs
      
      okx:
        path: "exchanges/okx"
        type: "static"
        fields:
          - name: "api_key"
            type: "string"
            required: true
          - name: "api_secret"
            type: "string"
            required: true
            sensitive: true
          - name: "passphrase"
            type: "string"
            required: true
            sensitive: true
        
        rotation_policy:
          enabled: true
          interval: 604800  # 7 days
          advance_notice: 86400  # 1 day
          automatic: false
      
      coinbase:
        path: "exchanges/coinbase"
        type: "static"
        fields:
          - name: "api_key"
            type: "string"
            required: true
          - name: "api_secret"
            type: "string"
            required: true
            sensitive: true
        
        rotation_policy:
          enabled: true
          interval: 604800  # 7 days
          advance_notice: 86400  # 1 day
          automatic: false
  
  # Application secrets
  application_secrets:
    path_prefix: "app/"
    ttl: 86400  # 1 day
    max_ttl: 2592000  # 30 days
    
    secrets:
      jwt_secrets:
        path: "app/jwt"
        type: "generated"
        fields:
          - name: "secret_key"
            type: "string"
            required: true
            min_length: 64
            algorithm: "HS256"
          - name: "private_key"
            type: "rsa_private_key"
            key_size: 2048
            algorithm: "RS256"
          - name: "public_key"
            type: "rsa_public_key"
            algorithm: "RS256"
        
        rotation_policy:
          enabled: true
          interval: 2592000  # 30 days
          advance_notice: 604800  # 7 days
          automatic: true
      
      encryption_keys:
        path: "app/encryption"
        type: "generated"
        fields:
          - name: "master_key"
            type: "aes_key"
            key_size: 256
            required: true
          - name: "data_key"
            type: "aes_key"
            key_size: 256
            required: true
          - name: "salt"
            type: "random"
            length: 32
        
        rotation_policy:
          enabled: true
          interval: 7776000  # 90 days
          advance_notice: 1209600  # 14 days
          automatic: true
      
      webhook_secrets:
        path: "app/webhooks"
        type: "generated"
        fields:
          - name: "signing_secret"
            type: "random"
            length: 64
            encoding: "base64"
        
        rotation_policy:
          enabled: true
          interval: 2592000  # 30 days
          advance_notice: 604800  # 7 days
  
  # Third-party integrations
  integration_secrets:
    path_prefix: "integrations/"
    ttl: 3600  # 1 hour
    max_ttl: 86400  # 1 day
    
    secrets:
      monitoring:
        path: "integrations/monitoring"
        type: "static"
        fields:
          - name: "prometheus_token"
            type: "string"
          - name: "grafana_api_key"
            type: "string"
          - name: "pagerduty_key"
            type: "string"
      
      logging:
        path: "integrations/logging"
        type: "static"
        fields:
          - name: "elasticsearch_password"
            type: "string"
          - name: "logstash_key"
            type: "string"
      
      backup:
        path: "integrations/backup"
        type: "static"
        fields:
          - name: "s3_access_key"
            type: "string"
          - name: "s3_secret_key"
            type: "string"
            sensitive: true

# Secret Rotation Configuration
rotation:
  # Global rotation settings
  global_settings:
    enabled: true
    check_interval: 3600  # Check every hour
    notification_channels: ["email", "slack", "pagerduty"]
    
    # Rotation windows
    rotation_windows:
      - name: "maintenance_window"
        start_time: "02:00"
        end_time: "04:00"
        timezone: "UTC"
        days: ["Sunday", "Wednesday"]
      
      - name: "emergency_window"
        start_time: "00:00"
        end_time: "23:59"
        timezone: "UTC"
        days: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
        emergency_only: true
  
  # Rotation strategies
  strategies:
    # Blue-green rotation (for database credentials)
    blue_green:
      description: "Create new credentials before revoking old ones"
      steps:
        - "create_new_credentials"
        - "test_new_credentials"
        - "update_application_config"
        - "restart_services"
        - "verify_functionality"
        - "revoke_old_credentials"
      
      rollback_steps:
        - "restore_old_credentials"
        - "update_application_config"
        - "restart_services"
        - "delete_new_credentials"
    
    # Rolling rotation (for API keys)
    rolling:
      description: "Gradual rotation across service instances"
      steps:
        - "create_new_credentials"
        - "update_subset_of_instances"
        - "verify_functionality"
        - "update_remaining_instances"
        - "revoke_old_credentials"
    
    # Immediate rotation (for compromised secrets)
    immediate:
      description: "Emergency rotation for compromised credentials"
      steps:
        - "revoke_old_credentials"
        - "create_new_credentials"
        - "update_all_instances"
        - "verify_functionality"
  
  # Pre and post rotation hooks
  hooks:
    pre_rotation:
      - name: "backup_current_secret"
        script: "/scripts/backup_secret.sh"
        timeout: 60
      - name: "notify_operations"
        script: "/scripts/notify_rotation_start.sh"
        timeout: 30
    
    post_rotation:
      - name: "verify_secret_functionality"
        script: "/scripts/verify_secret.sh"
        timeout: 120
      - name: "update_monitoring_configs"
        script: "/scripts/update_monitoring.sh"
        timeout: 60
      - name: "notify_completion"
        script: "/scripts/notify_rotation_complete.sh"
        timeout: 30
    
    rollback:
      - name: "restore_previous_secret"
        script: "/scripts/restore_secret.sh"
        timeout: 60
      - name: "notify_rollback"
        script: "/scripts/notify_rollback.sh"
        timeout: 30

# Encryption Configuration
encryption:
  # Encryption in transit
  transit:
    enabled: true
    protocols: ["TLSv1.2", "TLSv1.3"]
    cipher_suites:
      - "TLS_AES_256_GCM_SHA384"
      - "TLS_CHACHA20_POLY1305_SHA256"
      - "ECDHE-RSA-AES256-GCM-SHA384"
  
  # Encryption at rest
  at_rest:
    enabled: true
    algorithm: "AES-256-GCM"
    key_derivation: "PBKDF2"
    iterations: 100000
    
    # Key management
    key_management:
      provider: "vault_transit"  # vault_transit, aws_kms, azure_key_vault
      key_ring: "tbot-secrets"
      master_key: "tbot-master-key"
      
      # Key rotation
      auto_rotation: true
      rotation_interval: 7776000  # 90 days
      
      # Key versioning
      versions_to_keep: 5
      min_decryption_version: 1
      min_encryption_version: 0
  
  # Field-level encryption
  field_encryption:
    enabled: true
    fields:
      - field_name: "password"
        algorithm: "AES-256-GCM"
        key_derivation: "HKDF"
      - field_name: "api_secret"
        algorithm: "AES-256-GCM"
        key_derivation: "HKDF"
      - field_name: "private_key"
        algorithm: "AES-256-GCM"
        key_derivation: "HKDF"

# Access Control and Policies
access_control:
  # Role-based access control
  rbac:
    enabled: true
    
    roles:
      # Admin role - full access
      admin:
        description: "Full access to all secrets"
        policies:
          - "secret/*"
        capabilities: ["create", "read", "update", "delete", "list", "rotate"]
      
      # Application role - production access
      application:
        description: "Production application access"
        policies:
          - "database/postgresql"
          - "database/redis"
          - "database/influxdb"
          - "exchanges/*"
          - "app/jwt"
          - "app/encryption"
        capabilities: ["read"]
        
        # IP restrictions
        bound_cidrs: ["10.0.0.0/8", "172.16.0.0/12"]
        
        # Time restrictions
        token_ttl: 3600  # 1 hour
        token_max_ttl: 7200  # 2 hours
      
      # Developer role - limited access
      developer:
        description: "Development environment access"
        policies:
          - "database/postgresql"
          - "database/redis"
        capabilities: ["read"]
        
        # Environment restriction
        bound_namespaces: ["development", "staging"]
        token_ttl: 28800  # 8 hours
      
      # CI/CD role - deployment access
      cicd:
        description: "CI/CD pipeline access"
        policies:
          - "app/jwt"
          - "integrations/*"
        capabilities: ["read", "create"]
        
        # Token bound to specific service accounts
        bound_service_accounts: ["tbot-deploy", "tbot-ci"]
        token_ttl: 1800  # 30 minutes
  
  # Multi-factor authentication
  mfa:
    enabled: true
    required_for:
      - "admin"
      - "rotation_operations"
    
    methods:
      - type: "totp"
        issuer: "TBot-Vault"
      - type: "push"
        provider: "duo"
      - type: "okta"
        org_name: "company"
  
  # Approval workflow
  approval_workflow:
    enabled: true
    required_for:
      - "production_secret_access"
      - "secret_rotation"
      - "emergency_access"
    
    workflows:
      production_access:
        approvers: 2
        approver_roles: ["senior_engineer", "security_team"]
        timeout: 3600  # 1 hour
        emergency_bypass: true
      
      emergency_access:
        approvers: 1
        approver_roles: ["incident_commander", "security_team"]
        timeout: 1800  # 30 minutes

# Monitoring and Alerting
monitoring:
  # Audit logging
  audit_logging:
    enabled: true
    log_level: "all"
    destinations:
      - type: "file"
        path: "/var/log/vault/audit.log"
        rotation: true
        max_size: "100MB"
        max_files: 10
      - type: "syslog"
        facility: "auth"
        severity: "info"
      - type: "elasticsearch"
        hosts: ["elasticsearch-security.internal:9200"]
        index: "vault-audit"
    
    # Audit events
    events:
      - "secret_access"
      - "secret_creation"
      - "secret_update"
      - "secret_deletion"
      - "secret_rotation"
      - "authentication"
      - "authorization_failure"
      - "policy_changes"
  
  # Metrics and alerting
  metrics:
    enabled: true
    
    # Prometheus metrics
    prometheus:
      enabled: true
      path: "/metrics"
      
      # Custom metrics
      metrics:
        - name: "vault_secret_access_total"
          help: "Total secret access attempts"
          labels: ["path", "method", "status"]
        
        - name: "vault_secret_rotation_total"
          help: "Total secret rotations"
          labels: ["path", "status"]
        
        - name: "vault_secret_expiry_seconds"
          help: "Secret expiry time in seconds"
          labels: ["path", "type"]
    
    # Alerting rules
    alerts:
      # High-priority alerts
      critical:
        - name: "secret_access_failure_rate"
          condition: "rate(vault_secret_access_total{status=~'4..|5..'}[5m]) > 0.1"
          for: "2m"
          description: "High rate of secret access failures"
        
        - name: "secret_near_expiry"
          condition: "vault_secret_expiry_seconds < 604800"  # 7 days
          for: "1m"
          description: "Secret expiring within 7 days"
        
        - name: "unauthorized_access_attempt"
          condition: "increase(vault_secret_access_total{status='403'}[5m]) > 5"
          for: "1m"
          description: "Multiple unauthorized access attempts"
      
      # Medium-priority alerts
      warning:
        - name: "secret_rotation_failure"
          condition: "vault_secret_rotation_total{status='failed'} > 0"
          for: "5m"
          description: "Secret rotation failure detected"
        
        - name: "vault_service_unavailable"
          condition: "up{job='vault'} == 0"
          for: "1m"
          description: "Vault service is unavailable"

# Compliance and Security
compliance:
  # Security standards
  standards:
    - "NIST-800-57"  # Key Management
    - "FIPS-140-2"   # Cryptographic Module Validation
    - "Common Criteria"  # Security Evaluation
    - "SOC-2"        # Service Organization Controls
  
  # Data classification
  data_classification:
    levels:
      - name: "public"
        encryption: false
        access_control: "basic"
      - name: "internal"
        encryption: true
        access_control: "rbac"
      - name: "confidential"
        encryption: true
        access_control: "rbac+mfa"
      - name: "restricted"
        encryption: true
        access_control: "rbac+mfa+approval"
    
    # Automatic classification rules
    classification_rules:
      - pattern: "*password*"
        level: "confidential"
      - pattern: "*secret*"
        level: "confidential"
      - pattern: "*key*"
        level: "restricted"
      - pattern: "*token*"
        level: "confidential"
  
  # Data retention
  retention:
    audit_logs: 2555  # 7 years
    secret_history: 365  # 1 year
    access_logs: 90     # 3 months
    
    # Automatic cleanup
    cleanup:
      enabled: true
      schedule: "0 2 * * 0"  # Weekly on Sunday at 2 AM
      
      # Cleanup policies
      policies:
        - name: "expired_secrets"
          action: "delete"
          condition: "expired > 30 days"
        - name: "unused_secrets"
          action: "archive"
          condition: "last_accessed > 90 days"

# Integration Configuration
integrations:
  # Kubernetes integration
  kubernetes:
    enabled: true
    auth_method: "kubernetes"
    service_account_jwt_path: "/var/run/secrets/kubernetes.io/serviceaccount/token"
    
    # Secret injection
    secret_injection:
      method: "init_container"  # init_container, sidecar, vault_agent
      image: "vault:latest"
      
      # Template configuration
      templates:
        - source: "database/postgresql"
          destination: "/secrets/db-credentials"
          template: |
            username: {{.Data.username}}
            password: {{.Data.password}}
        - source: "app/jwt"
          destination: "/secrets/jwt-keys"
          template: |
            secret_key: {{.Data.secret_key}}
            private_key: {{.Data.private_key}}
            public_key: {{.Data.public_key}}
  
  # Docker integration
  docker:
    enabled: true
    
    # Docker secrets
    docker_secrets:
      enabled: true
      secret_driver: "vault"
      
      # Secret mappings
      mappings:
        - vault_path: "database/postgresql"
          docker_secret: "db_credentials"
        - vault_path: "exchanges/binance"
          docker_secret: "binance_api"
  
  # CI/CD integration
  cicd:
    enabled: true
    
    # GitHub Actions
    github_actions:
      vault_url: "${VAULT_URL}"
      auth_method: "jwt"
      role: "github-actions"
      
      # OIDC configuration
      oidc:
        bound_audiences: ["https://github.com/company"]
        bound_claims:
          repository: "company/tbot"
          ref: "refs/heads/main"
    
    # Jenkins
    jenkins:
      vault_url: "${VAULT_URL}"
      auth_method: "userpass"
      credentials_id: "vault-jenkins"