name: CI Pipeline

on:
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'

env:
  PYTHON_VERSION: '3.10.12'
  NODE_VERSION: '18'
  POSTGRES_DB: tbot_test
  POSTGRES_USER: tbot_user
  POSTGRES_PASSWORD: test_password
  REDIS_URL: redis://localhost:6379
  SECRET_KEY: test-secret-key-for-ci
  JWT_SECRET: test-jwt-secret-for-ci

jobs:
  # ==============================================================================
  # Quality Gates - Fast feedback on code quality
  # ==============================================================================
  quality-gates:
    name: Code Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff black mypy bandit safety
        # Install project dependencies for type checking
        pip install -r requirements.txt

    - name: Run Ruff linting
      run: |
        ruff check src/ tests/ --output-format=github
        
    - name: Run Ruff formatting check
      run: |
        ruff format --check src/ tests/

    - name: Run Black formatting check
      run: |
        black --check --diff src/ tests/ --line-length 100

    - name: Run MyPy type checking
      run: |
        mypy src/ --ignore-missing-imports --install-types --non-interactive

    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/ --severity-level medium

    - name: Run Safety dependency scan
      run: |
        safety check --json --output safety-report.json
        safety check

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # ==============================================================================
  # Backend Tests - Comprehensive Python testing
  # ==============================================================================
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: quality-gates
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          build-essential \
          libpq-dev \
          libssl-dev \
          libffi-dev \
          libblas-dev \
          liblapack-dev \
          libatlas-base-dev \
          wget

    - name: Install TA-Lib
      run: |
        cd /tmp
        wget -q https://github.com/TA-Lib/ta-lib/releases/download/v0.6.4/ta-lib-0.6.4-src.tar.gz
        tar -xzf ta-lib-0.6.4-src.tar.gz
        cd ta-lib-0.6.4/
        ./configure --prefix=/usr
        make -j$(nproc)
        sudo make install
        cd /
        rm -rf /tmp/ta-lib-0.6.4*

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install pytest-cov pytest-mock pytest-xdist

    - name: Wait for services
      run: |
        timeout 60 bash -c 'until nc -z localhost 5432; do sleep 1; done'
        timeout 60 bash -c 'until nc -z localhost 6379; do sleep 1; done'

    - name: Setup test database
      run: |
        export DATABASE_URL="postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}"
        # Run any necessary database setup/migrations here
        echo "Database setup completed"

    - name: Run unit tests with coverage
      run: |
        pytest tests/unit/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term \
          --cov-fail-under=80 \
          --maxfail=5 \
          --tb=short \
          -v \
          --durations=10

    - name: Run integration tests
      run: |
        pytest tests/integration/ \
          --maxfail=3 \
          --tb=short \
          -v \
          --durations=10

    - name: Run performance tests
      run: |
        pytest tests/performance/ \
          --maxfail=1 \
          --tb=short \
          -v

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        fail_ci_if_error: true
        verbose: true

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: |
          htmlcov/
          coverage.xml
          pytest-report.xml

  # ==============================================================================
  # Frontend Tests - React/TypeScript testing
  # ==============================================================================
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: quality-gates
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run TypeScript type check
      run: npm run type-check

    - name: Run Jest tests with coverage
      run: npm run test:coverage

    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./frontend/coverage/lcov.info
        flags: frontend
        fail_ci_if_error: true

    - name: Upload frontend test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results
        path: |
          frontend/coverage/
          frontend/test-results/

  # ==============================================================================
  # Docker Build - Multi-architecture builds
  # ==============================================================================
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend image (test)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: production
        push: false
        tags: tbot-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Build frontend image (test)
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: tbot-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Test backend image
      run: |
        docker run --rm -d --name tbot-test \
          -p 8000:8000 \
          -e SECRET_KEY=test \
          -e JWT_SECRET=test \
          tbot-backend:test
        
        # Wait for container to start
        sleep 30
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Clean up
        docker stop tbot-test

  # ==============================================================================
  # End-to-End Integration Tests
  # ==============================================================================
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: docker-build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Start services with Docker Compose
      run: |
        # Use test docker-compose configuration
        docker-compose -f docker-compose.yml up -d
        
        # Wait for services to be ready
        timeout 120 bash -c 'until curl -f http://localhost:8000/health; do sleep 5; done'
        timeout 120 bash -c 'until curl -f http://localhost:3000; do sleep 5; done'

    - name: Run basic integration tests
      run: |
        # Test API endpoints
        curl -f http://localhost:8000/health
        curl -f http://localhost:8000/docs
        
        # Test frontend
        curl -f http://localhost:3000

    - name: Cleanup
      if: always()
      run: |
        docker-compose -f docker-compose.yml down -v

  # ==============================================================================
  # Security Scans - Additional security validation
  # ==============================================================================
  security-scans:
    name: Security Scans
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'tbot-backend:test'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Semgrep security scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
          p/javascript
        generateSarif: "1"

  # ==============================================================================
  # Summary Job - Aggregate results
  # ==============================================================================
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [quality-gates, backend-tests, frontend-tests, docker-build, security-scans]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        echo "Quality Gates: ${{ needs.quality-gates.result }}"
        echo "Backend Tests: ${{ needs.backend-tests.result }}"
        echo "Frontend Tests: ${{ needs.frontend-tests.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"
        echo "Security Scans: ${{ needs.security-scans.result }}"
        
        if [[ "${{ needs.quality-gates.result }}" != "success" ]] || \
           [[ "${{ needs.backend-tests.result }}" != "success" ]] || \
           [[ "${{ needs.frontend-tests.result }}" != "success" ]] || \
           [[ "${{ needs.docker-build.result }}" != "success" ]]; then
          echo "❌ CI Pipeline failed"
          exit 1
        else
          echo "✅ CI Pipeline passed"
        fi